                          NAME : Manmeet Mann
                     INSTITUTE STUDENT ID : 1087101


                CIS*3110 Operating Systems (Winter 2021)
                  Assignment #4: File System Reports

    struct stat fileStat is mainly used to retrieve data from the files.

MAIN DRAWBACK - Due to recursion happening here, This algorithm is quite memory deficient.
Hence it is limited to only:

        -100 levels
            -200 directories at each level
                -200 files 
                -200 subdirectories


Part A ::

AT EACH LEVEL,
    Tree is sorted as alphabetical order of the directories apperaring and also the sub directories and files
    are appearing in alphabetical sequence with all the needed information.
    If no files or subdirectories then that level would not appear.
    
    --- We are using Merge Sort to sort in alphabetical order using "strcmp"

We are stimulating the file reports in the path given to us to all further levels in tree form

Main function used for traversing all files :: 

    func getTREE:
        struct dirent *dp;
        DIR *dir = opendir(path);

        while ((dp = readdir(dir)) != NULL)
        {
            .......
            getTREE(newpath,level+1); // RECURSIVELY CALL
        }   

   Here we are storing only name and path of subdirectory and files inside and printing its information in while loop
   in main function after merge sorting..

    *** MAIN ALGORITHM :: AT EACH LEVEL, WE ARE CALCULATING ITS SUB-DIRECTORIES AND FILES IN THAT FOLDER SO THAT
        WE CAN DISPLAY WHAT WE EXACTLY NEED.
        (   using  -- 
            directory           /* Struct */      
                char *name;
                int num_files;
                int num_subdirs;
                file_info *files_in_dir;
                file_info *sub_dirs;
            dir_lev             /* Struct */  
                int num_dirs;
                directory *directories;
        )

    /*
        Initializing
        Calling function
        Printing Appropiate data using stat()
        Freeing Up memory 
    */
    

Part B ::

AT EACH LEVEL,
    Printing is done in increasing order of the inodes of sub-directories as well as files inside.
    If no files or subdirectories then that level would not appear.
    *** Levels' Directory names are not sorted in Alphabetical order...

    --- We are using Merge Sort to sort in increasing INODE order by comparing

inode_file_info:
    char *name;
    int inode_num;
    int size; /* Bytes */
    int blocks;
    int division;

** This is the main struct for storing memory.

*** MAIN ALGORITHM :: AT EACH LEVEL, WE ARE CALCULATING ITS SUB-DIRECTORIES AND FILES IN THAT FOLDER SO THAT
        WE CAN DISPLAY WHAT WE EXACTLY NEED.

Main function used for traversing all files and sub - directories :: 

    func getINODE:
        struct dirent *dp;
        DIR *dir = opendir(path);

        while ((dp = readdir(dir)) != NULL)
        {
            .......
            getINODE(newpath,level+1); // RECURSIVELY CALL
        }  

    /*
        Initializing
        Calling function
        Printing 
        Freeing Up memory 
    */